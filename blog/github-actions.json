{"title":"GitHub Actions","slug":"github-actions","published":true,"text":"github actions 是 GitHub 官方的 `CI/CD` 框架，也可以认为是 `CI/CD` 的升级版。只要项目有动作的时候就会自动触发配置好的流程脚本。例如发布 npm 模块、issue 上有人提紧急 bug 的时候发送短信、构建项目并发布等等。\nGitHub Actions 可以自己创建、也可以共享（通过发布到[商店](https://github.com/marketplace?type=actions)）。\n\n由于目前 github actions 尚处于 beta 阶段，目前须先到 [GitHub Actions page](https://github.com/features/actions) 上申请开通才可使用。\n\n## Actions\n\n动作，可以理解为执行一段脚本。需要在 Docker 容器内运行，可以访问代码、环境变量等\n\n## Workflows\n\n工作流，多个 action 组成一个工作流。action之间可以定义依赖关系。存储在 `.github/main.workflow` 文件中。\n\n## 创建 Action\n\n创建 action 只需要编写一个 `Dockerfile`，通常还要包含 `README.md` 和 `entrypoint.sh`。其他文件可随意。\n\n一般单独创建某个 action 的仓库，在根目录中放置 `Dockerfile`。这样可以被其他仓库引用。\n也可以放置在需要用到这个 `action` 的项目仓库中，这样一般仅被当前项目所用。\n\n默认 `entrypoint.sh` 是该 action 的执行入口。需要的功能在该文件实现。如果比较复杂，可以调用外部脚本。\n\n编写 `entrypoint.sh` 需要注意一下几点\n\n1. 添加 `#!/bin/sh` 在头部，脚本尽量使用通用的 `shell` 语法\n2. 添加 `set -eu` 确保程序报错时 action 不要继续往下执行\n3. `entrypoint.sh` 需要添加执行权限 `chmod +x entrypoint.sh`\n\nDockerfile 的编写需要注意[这些地方](https://developer.github.com/actions/creating-github-actions/creating-a-docker-container/)\n\n样例：\n\nDockerfile\n\n```Dockerfile\nFROM debian:9.5-slim\n\nLABEL \"com.github.actions.name\"=\"Hello World\"\nLABEL \"com.github.actions.description\"=\"Write arguments to the standard output\"\nLABEL \"com.github.actions.icon\"=\"mic\"\nLABEL \"com.github.actions.color\"=\"purple\"\n\nLABEL \"repository\"=\"http://github.com/octocat/hello-world\"\nLABEL \"homepage\"=\"http://github.com/actions\"\nLABEL \"maintainer\"=\"Octocat <octocat@github.com>\"\n\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\nentrypoint.sh\n\n```sh\n#!/bin/sh -l\nset -eu\nsh -c \"echo $*\"\n```\n\n每个 action 都能访问网络和读写文件，对文件的修改在后续 action 中能保留。\n\n在 action 中能访问的环境变量有[这些](https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables)，常用的有：\n\n- GITHUB_ACTOR: 触发该 action 的人或 app\n- GITHUB_TOKEN: 有所在仓库相关权限的 token\n\n## 创建 Workflows\n\n编辑可以通过可视化界面操作，具体查阅[这里](https://help.github.com/en/articles/creating-a-workflow-with-github-actions)\n\n也可以通过编辑 `.github/main.workflow` 文件来创建、修改 workflow。\n\nworkflow 主要有两中类型块，分别为 workflow 块和 action 块，每种块都可以出现多次。\n\n__[详细配置](https://developer.github.com/actions/managing-workflows/workflow-configuration-options/)__\n\n### workflow 块\n\n用于定义工作流。\n\n样例：\n\n1. 有代码 push 的时候执行 `action a` 和 `action b` 两个操作\n2. 每隔15分钟执行一次 `action c`\n\n```\nworkflow \"IDENTIFIER\" {\n  on = \"push\"\n  resolves = [\"action a\", \"action b\"]\n}\nworkflow \"IDENTIFIER\" {\n  on = \"schedule(*/15 * * * *)\"\n  resolves = [\"action c\"]\n}\n```\n\n### action 块\n\n用于定义每个任务执行的内容和参数以及依赖。\n\n常用配置\n\n- uses: 使用的 `docker` 镜像，可以是已发布的 docker 镜像、独立的 GitHub 仓库或本仓库的相对路径\n- runs: 运行的脚本，若定义了 entrypoint，一般可省略\n- args: 拼接到 entrypoint 后的参数\n\n样例：\n\n1. `action a` 使用 `node:10` 镜像运行\n2. `action b` 使用 `actions/heroku` 仓库、master 分支的 Dockerfile 描述的镜像运行\n3. `action c` 使用本仓库下的 Dockerfile 描述的镜像运行\n4. `action c` 依赖 `action a` 和 `action b`\n\n```\naction \"action a\" {\n  uses = \"node:10\"\n  runs = [\"npm\", \"install\"]\n}\naction \"action b\" {\n  uses = \"actions/heroku@master\"\n}\naction \"action c\" {\n  uses = \"./action-c/\"\n  needs = [\"action a\", \"action b\"]\n}\n```\n\n## 参考链接\n\n- [GitHub Actions](https://developer.github.com/actions/)\n- [Customizing your project with GitHub Actions](https://help.github.com/en/articles/customizing-your-project-with-github-actions)\n- [Creating a workflow with GitHub Actions](https://help.github.com/en/articles/creating-a-workflow-with-github-actions)\n- [Workflow configuration options](https://developer.github.com/actions/managing-workflows/workflow-configuration-options/)\n","attr":{"title":"GitHub Actions"},"date":"2019-05-30","html":"<p>github actions 是 GitHub 官方的 <code>CI/CD</code> 框架，也可以认为是 <code>CI/CD</code> 的升级版。只要项目有动作的时候就会自动触发配置好的流程脚本。例如发布 npm 模块、issue 上有人提紧急 bug 的时候发送短信、构建项目并发布等等。\nGitHub Actions 可以自己创建、也可以共享（通过发布到<a href=\"https://github.com/marketplace?type=actions\">商店</a>）。</p>\n<p>由于目前 github actions 尚处于 beta 阶段，目前须先到 <a href=\"https://github.com/features/actions\">GitHub Actions page</a> 上申请开通才可使用。</p>\n<h2 id=\"actions\">Actions</h2>\n<p>动作，可以理解为执行一段脚本。需要在 Docker 容器内运行，可以访问代码、环境变量等</p>\n<h2 id=\"workflows\">Workflows</h2>\n<p>工作流，多个 action 组成一个工作流。action之间可以定义依赖关系。存储在 <code>.github/main.workflow</code> 文件中。</p>\n<h2 id=\"创建-action\">创建 Action</h2>\n<p>创建 action 只需要编写一个 <code>Dockerfile</code>，通常还要包含 <code>README.md</code> 和 <code>entrypoint.sh</code>。其他文件可随意。</p>\n<p>一般单独创建某个 action 的仓库，在根目录中放置 <code>Dockerfile</code>。这样可以被其他仓库引用。\n也可以放置在需要用到这个 <code>action</code> 的项目仓库中，这样一般仅被当前项目所用。</p>\n<p>默认 <code>entrypoint.sh</code> 是该 action 的执行入口。需要的功能在该文件实现。如果比较复杂，可以调用外部脚本。</p>\n<p>编写 <code>entrypoint.sh</code> 需要注意一下几点</p>\n<ol>\n<li>添加 <code>#!/bin/sh</code> 在头部，脚本尽量使用通用的 <code>shell</code> 语法</li>\n<li>添加 <code>set -eu</code> 确保程序报错时 action 不要继续往下执行</li>\n<li><code>entrypoint.sh</code> 需要添加执行权限 <code>chmod +x entrypoint.sh</code></li>\n</ol>\n<p>Dockerfile 的编写需要注意<a href=\"https://developer.github.com/actions/creating-github-actions/creating-a-docker-container/\">这些地方</a></p>\n<p>样例：</p>\n<p>Dockerfile</p>\n<pre><code class=\"language-Dockerfile\">FROM debian:9.5-slim\n\nLABEL &quot;com.github.actions.name&quot;=&quot;Hello World&quot;\nLABEL &quot;com.github.actions.description&quot;=&quot;Write arguments to the standard output&quot;\nLABEL &quot;com.github.actions.icon&quot;=&quot;mic&quot;\nLABEL &quot;com.github.actions.color&quot;=&quot;purple&quot;\n\nLABEL &quot;repository&quot;=&quot;http://github.com/octocat/hello-world&quot;\nLABEL &quot;homepage&quot;=&quot;http://github.com/actions&quot;\nLABEL &quot;maintainer&quot;=&quot;Octocat &lt;octocat@github.com&gt;&quot;\n\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [&quot;/entrypoint.sh&quot;]</code></pre>\n<p>entrypoint.sh</p>\n<pre><code class=\"language-sh\">#!/bin/sh -l\nset -eu\nsh -c &quot;echo $*&quot;</code></pre>\n<p>每个 action 都能访问网络和读写文件，对文件的修改在后续 action 中能保留。</p>\n<p>在 action 中能访问的环境变量有<a href=\"https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables\">这些</a>，常用的有：</p>\n<ul>\n<li>GITHUB_ACTOR: 触发该 action 的人或 app</li>\n<li>GITHUB_TOKEN: 有所在仓库相关权限的 token</li>\n</ul>\n<h2 id=\"创建-workflows\">创建 Workflows</h2>\n<p>编辑可以通过可视化界面操作，具体查阅<a href=\"https://help.github.com/en/articles/creating-a-workflow-with-github-actions\">这里</a></p>\n<p>也可以通过编辑 <code>.github/main.workflow</code> 文件来创建、修改 workflow。</p>\n<p>workflow 主要有两中类型块，分别为 workflow 块和 action 块，每种块都可以出现多次。</p>\n<p><strong><a href=\"https://developer.github.com/actions/managing-workflows/workflow-configuration-options/\">详细配置</a></strong></p>\n<h3 id=\"workflow-块\">workflow 块</h3>\n<p>用于定义工作流。</p>\n<p>样例：</p>\n<ol>\n<li>有代码 push 的时候执行 <code>action a</code> 和 <code>action b</code> 两个操作</li>\n<li>每隔15分钟执行一次 <code>action c</code></li>\n</ol>\n<pre><code>workflow &quot;IDENTIFIER&quot; {\n  on = &quot;push&quot;\n  resolves = [&quot;action a&quot;, &quot;action b&quot;]\n}\nworkflow &quot;IDENTIFIER&quot; {\n  on = &quot;schedule(*/15 * * * *)&quot;\n  resolves = [&quot;action c&quot;]\n}</code></pre><h3 id=\"action-块\">action 块</h3>\n<p>用于定义每个任务执行的内容和参数以及依赖。</p>\n<p>常用配置</p>\n<ul>\n<li>uses: 使用的 <code>docker</code> 镜像，可以是已发布的 docker 镜像、独立的 GitHub 仓库或本仓库的相对路径</li>\n<li>runs: 运行的脚本，若定义了 entrypoint，一般可省略</li>\n<li>args: 拼接到 entrypoint 后的参数</li>\n</ul>\n<p>样例：</p>\n<ol>\n<li><code>action a</code> 使用 <code>node:10</code> 镜像运行</li>\n<li><code>action b</code> 使用 <code>actions/heroku</code> 仓库、master 分支的 Dockerfile 描述的镜像运行</li>\n<li><code>action c</code> 使用本仓库下的 Dockerfile 描述的镜像运行</li>\n<li><code>action c</code> 依赖 <code>action a</code> 和 <code>action b</code></li>\n</ol>\n<pre><code>action &quot;action a&quot; {\n  uses = &quot;node:10&quot;\n  runs = [&quot;npm&quot;, &quot;install&quot;]\n}\naction &quot;action b&quot; {\n  uses = &quot;actions/heroku@master&quot;\n}\naction &quot;action c&quot; {\n  uses = &quot;./action-c/&quot;\n  needs = [&quot;action a&quot;, &quot;action b&quot;]\n}</code></pre><h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li><a href=\"https://developer.github.com/actions/\">GitHub Actions</a></li>\n<li><a href=\"https://help.github.com/en/articles/customizing-your-project-with-github-actions\">Customizing your project with GitHub Actions</a></li>\n<li><a href=\"https://help.github.com/en/articles/creating-a-workflow-with-github-actions\">Creating a workflow with GitHub Actions</a></li>\n<li><a href=\"https://developer.github.com/actions/managing-workflows/workflow-configuration-options/\">Workflow configuration options</a></li>\n</ul>\n"}